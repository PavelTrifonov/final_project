import aiohttp
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor


# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
def read_token_from_file(filepath='app/token.txt'):
    with open(filepath, 'r') as file:
        return file.read().strip()


# –ß—Ç–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
API_TOKEN = read_token_from_file()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = 'http://localhost:5000/classify'

# –ü–æ—Ä–æ–≥ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
WARNING_THRESHOLD = 0.8
DELETE_THRESHOLD = 0.9

# ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
CHAT_ID = '5615077468'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def on_startup(dp):
    await bot.send_message(CHAT_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
async def classify_toxicity(message: str):
    async with aiohttp.ClientSession() as session:
        async with session.post(SERVER_URL, json={"message": message}) as response:
            if response.status == 200:
                data = await response.json()
                return data['toxicity_label'], data['score']
            return None, None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_message(message: types.Message):
    user_name = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
    toxicity_label, toxicity_score = await classify_toxicity(text)

    if toxicity_label == 'toxic':
        if toxicity_score >= DELETE_THRESHOLD:
            await message.delete()
            await message.answer(f"‚ùå {user_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {toxicity_score:.2f}.")
        elif toxicity_score >= WARNING_THRESHOLD:
            await message.answer(f"üîî {user_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {toxicity_score:.2f}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!")
    # –ù–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ WARNING_THRESHOLD

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
